Find examples of equation effects below.
These can be modified to achieve specific results.
Comments with a hashtag (#)are there to provide context

#Primary Equations (xEquation, yEquation, zEquation)
#These control the position of “main” particles. The variable t starts at 0 and increases by 1 for each particle (up to particles - 1).
#X - Left to Right | East to West
#Y - Up and Down | Vertical axis
#Z - Front to Back | North to South

#Common Functions:
#sin(t) and cos(t): Create circular or wavy patterns.
#rand(a, b): Picks a random number between a and b, great for scattered effects.

#ideal for making something look fast
      DelayedTracer:
        position: buff
        effect-interval: 1 
        effect: effectlib
        effectlib:
            class: EquationEffect
            particle: SOUL_FLAME
            material: VINE 
            particles: 20  
            particles2: 3  
            orient: false
            cycle: false  
            xEquation: "sin(t * 0.3 + t2 * 2 * PI / 3) * 0.5" 
            yEquation: "0" 
            zEquation: "cos(t * 0.3 + t2 * 2 * PI / 3) * 0.5" 
        parameters:
          yEquation: "(t / 20) * (iter / iterations * 2)" 
          particles: "floor(20 * (iter / iterations)) + 5"
# Example 1: Particles that (should ) go straight in either left or right direction.
line_effect:
  spell-class: ".buff.DummySpell"
  duration: 20
  effects:
    eff1:
      position: buffeffectlib
      effect: effectlib
      effectlib:
        class: EquationEffect
        particle: FLAME
        particles: 20
        xEquation: "t"
        yEquation: "0"
        zEquation: "0"
        duration: 20
        iterations: 1

# Example 2: Circular Ring of End Rods
circle_effect:
  spell-class: ".buff.DummySpell"
  duration: 36
  effects:
    eff1:
      position: buffeffectlib
      effect: effectlib
      effectlib:
        class: EquationEffect
        particle: END_ROD
        particles: 36
        xEquation: "5 * cos(2 * 3.1415 * t / 36)"
        yEquation: "0"
        zEquation: "5 * sin(2 * 3.1415 * t / 36)"
        duration: 36
        iterations: 1

# Example 3: Spiral of Crit Particles
spiral_effect:
  spell-class: ".buff.DummySpell"
  duration: 100
  effects:
    eff1:
      position: buffeffectlib
      effect: effectlib
      effectlib:
        class: EquationEffect
        particle: CRIT
        particles: 100
        xEquation: "5 * cos(2 * 3.1415 * t / 20)"
        yEquation: "t / 10"
        zEquation: "5 * sin(2 * 3.1415 * t / 20)"
        duration: 100
        iterations: 1

# Example 4: Random Cloud of Redstone Dust
cloud_effect:
  spell-class: ".buff.DummySpell"
  duration: 50
  effects:
    eff1:
      position: buffeffectlib
      effect: effectlib
      effectlib:
        class: EquationEffect
        particle: REDSTONE
        particles: 50
        xEquation: "rand(-5, 5)"
        yEquation: "rand(-5, 5)"
        zEquation: "rand(-5, 5)"
        duration: 50
        iterations: 1

GaleblastJumpLoad:
  spell-class: ".buff.DummySpell"
  duration: 1
  effects:
    eff1:
      position: buffeffectlib
      effect: effectlib
      effectlib:
        class: EquationEffect
        particle: DUST_COLOR_TRANSITION #Creates particles that changes color
        color: FFFFFF #starting color
        to-color: 87CEEB #final color
        particles: 10
        particles2: 9
        duration: 10
        iterations: 1
        orientPitch: false
        cycle: false
        xEquation: 0
        yEquation: 0
        zEquation: 0
        x2Equation: (10 * (t/250 - 1)^2 + 0.5) * sin(4 * 3.1415 * t/250 + 2 * 3.1415 * t2/9)
        y2Equation: 0
        z2Equation: (10 * (t/250 - 1)^2 + 0.5) * cos(4 * 3.1415 * t/250 + 2 * 3.1415 * t2/9)
# Dont ask me how I made this, all I know is that it's very laggy but looks sick
IceDevilModifiedExpansion:
   spell-class: ".instant.DummySpell"
   effects:
       goldsparkles:
           position: caster
           effect: effectlib
           effectlib:
               class: Modified
               duration: 3475
               orient_pitch: true
               effect:
                   class: Sphere
                   particle: REDSTONE
                   color: 00BFFF
                   visible_range: 25
               parameters:
                   radius: "(t/10)*((t/10)^2-8 * (t/10)+16) / 2"
                   particles: "floor ( 3.1415 * ((t/10)*((t/10)^2-8 * (t/10)+16))^2 )"
       whitesprakles:
           position: caster
           effect: effectlib
           effectlib:
               class: Modified
               duration: 3475
               orient_pitch: true
               effect:
                   class: Sphere
                   particle: REDSTONE
                   color: 2795F5
                   visible_range: 25
               parameters:
                   radius: "(t/10)*((t/10)^2-8 * (t/10)+16) / 2"
                   particles: "floor ( 3.1415 * ((t/10)*((t/10)^2-8 * (t/10)+16))^2 )"
#In GaleblastJumpLoad:
#The primary equations are all "0", so all main particles are at the caster’s position.

#The sub-equations create a ring:
#The radius is (10 * (t/250 - 1)^2 + 0.5), which is about 10.5 blocks.
#The angle is 4 * 3.1415 * t/250 + 2 * 3.1415 * t2/9, which places particles in a circular pattern.


#Creating Your Own Effects
#To make your own effects, start with the templates provided.
#Modify the values to change the shapes
#https://www.wolframalpha.com/input?i=plot+3x%5E2-2xy+y%5E2%3D1

#Change Size: Increase numbers in equations (5 to 10 in the circle example for a larger ring).
#Add Randomness: Use rand(-1, 1) to scatter particles slightly.
#Adjust Particle Count: Increase particles or particles2 for denser effects, but be cautious of server lag.

